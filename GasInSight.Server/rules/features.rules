1. Authorization
Each endpoint except login should be protected by jwt token in headers.

Jwt access_token expires in 10 minutes, after expiry it should be refreshed using refresh_token.
Refresh_token expires in 5 days.

2. Authentication
App should use roles based Authentication. 
Admin will have access to everything.
Admin can set UserFacilityPermission for User, user will have (read or write) access only to facilities that are set by admin.
Admin is capable to add/edit/delete users.

3. Facilities and Sensors creation
Admin shouldn't be capable to create facilities and sensors. They are created only through service buss messages described in /GlobalRules/servicebus.rules. Server application only listens to messages
Admin or User with write access should be capable to update system names of facilities and sensors.
Sensor or facility ids are set from service bus messages, they are not generated by application. If entity with same id already exists, we ignore message.

4. Sensor data Websockets
Users should be capable to listen via websockets to sensor data.
There should be websocket manager for this purpose. It should have a dictionary of connections: {sensor_id: websocket[]}. 
it should have methods to add and remove connections and send message to all sockets for one sensor_id. 
Messages should be sent independently, if one failed, it shouldn't affect others.

5. Data pipeline
When we listen to service buss messages with type SensorData, we should save it to database into SensorRecord table and only then mark message as completed.
After marking message as completed, we should send message with this data to websockets, related to this sensor.

6. Controllers
In the application should be routers that cover next functionality that include Authentication rules:
 - CRUD users
 - Grant permissions to users
 - Update facilities and sensors names 
 - list facilities and sensors
 - list sensors data by sensor_id and datetime range
