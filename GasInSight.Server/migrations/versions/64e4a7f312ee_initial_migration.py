"""Initial migration

Revision ID: 64e4a7f312ee
Revises: 
Create Date: 2025-03-15 12:43:49.653433

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '64e4a7f312ee'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('locations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('locations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_locations_id'), ['id'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('refresh_token', sa.String(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('role', sa.Enum('Admin', 'User', name='userrole'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('facilities',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('DrillingRig', 'Pipelines', 'TankFarm', 'UndergroundStorage', 'ProcessingPlant', 'ImportTerminal', 'ExportTerminal', name='facilitytype'), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('facilities', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_facilities_id'), ['id'], unique=False)

    op.create_table('sensors',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('facility_id', sa.String(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('Active', 'Inactive', 'Maintenance', 'Fault', name='sensorstatus'), nullable=False),
    sa.Column('installed_at', sa.DateTime(), nullable=False),
    sa.Column('type', sa.Enum('Temperature', 'Pressure', 'Flow', 'Level', 'Humidity', 'Gas', 'Smoke', 'Fire', 'Motion', 'Proximity', 'Light', 'Sound', 'Vibration', 'Acceleration', 'Gyroscope', 'Magnetometer', 'Other', name='sensortype'), nullable=False),
    sa.ForeignKeyConstraint(['facility_id'], ['facilities.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('sensors', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_sensors_id'), ['id'], unique=False)

    op.create_table('user_facility_permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('facility_id', sa.String(), nullable=False),
    sa.Column('permission_type', sa.Enum('View', 'Edit', name='permissiontype'), nullable=False),
    sa.Column('granted_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['facility_id'], ['facilities.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_facility_permissions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_facility_permissions_id'), ['id'], unique=False)

    op.create_table('sensor_records',
    sa.Column('sensor_id', sa.String(), nullable=False),
    sa.Column('tracked_at', sa.DateTime(), nullable=False),
    sa.Column('data', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensors.id'], ),
    sa.PrimaryKeyConstraint('sensor_id', 'tracked_at')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sensor_records')
    with op.batch_alter_table('user_facility_permissions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_facility_permissions_id'))

    op.drop_table('user_facility_permissions')
    with op.batch_alter_table('sensors', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sensors_id'))

    op.drop_table('sensors')
    with op.batch_alter_table('facilities', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_facilities_id'))

    op.drop_table('facilities')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('locations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_locations_id'))

    op.drop_table('locations')
    # ### end Alembic commands ###
